                /*
                for(var i=0; i < testVideo['fovs'].length; i+=10) {
                    var testFOV = testVideo['fovs'][i];
                    var poly = ranking.overlapBoundary(testFOV, queryRegion);
                    if(poly != null) {
                        testPolys.push(poly);
                    }
                }
                //*/
                /*
                var sampleFOV = queryResults[Object.keys(queryResults)[0]]['fovs'][0];
                console.log(sampleFOV);
                var c_loc = turf.point([sampleFOV.properties['longitude'],sampleFOV.properties['latitude']]);
                console.log("c_loc: " + JSON.stringify(c_loc));
                var corners = algorithms.fovCornerPoints(c_loc, sampleFOV.properties['heading'], sampleFOV.properties['viewable_angle'],
                                                         sampleFOV.properties['visible_distance']);
                console.log("corners: " + corners);
                var pointInFOV = algorithms.pointFOVIntersect(c_loc, sampleFOV);
                console.log("Point in FOV: " + pointInFOV);
                var pointInPolygon = algorithms.pointPolygonIntersect(c_loc, sampleFOV);
                console.log("Point in Polygon: " + pointInPolygon);
                var line = {
                            "type":"Feature",
                            "id":3,
                            "bbox":[103.8634427160471887, 1.28821130544768181, 103.86613683465103009, 1.29248987271434879],
                            "geometry":
                            {"type": "LineString", "coordinates": [ [103.8634427160471887, 1.29248987271434879], [103.86613683465103009, 1.28821130544768181]]},
                            "properties":null
                        };
                var circle = algorithms.lineCircleIntersect(line,c_loc,0.2);
                console.log(circle);
                var p = {
                    "type":"Feature",
                    "id":4,
                    "geometry":
                    {"type": "Point", "coordinates": [103.8646389098524736, 1.28951273898685304]},
                    "properties": {}
                };
                var p2 = {
                    "type":"Feature",
                    "id":6,
                    "geometry":
                    {"type": "Point", "coordinates": [103.86512669857167168, 1.28823344404404216]},
                    "properties":null
                };
                var p3 = {
                    "type":"Feature",
                    "id":5,
                    "geometry":
                    {"type": "Point", "coordinates": [103.8648045739457757, 1.28981645649126131]},
                    "properties":null
                };
                var p4 = {
                    "type":"Feature",
                    "id":7,
                    "geometry":
                    {"type": "Point", "coordinates": [103.86340563271335213, 1.28731308797007782]},
                    "properties":null
                };
                var a1 = isWithinAngle(p, c_loc, 134.798138, 60);
                var a2 = isWithinAngle(p2, c_loc, 134.798138, 60);
                var a3 = isWithinAngle(p3, c_loc, 134.798138, 60);
                var a4 = isWithinAngle(p4, c_loc, 134.798138, 60);
                var arc = algorithms.estimateArc(corners[1],corners[2],c_loc);
                //*/
